"use strict";
const electron = require("electron");
const uuid = require("uuid");
const fetchNotes = async () => {
  return await db("note").select("*");
};
const updateNote = async (id, updates) => {
  return await db("note").where("id", id).update({
    ...updates,
    updated: Date.now()
  });
};
const deleteNote = async (id) => {
  return await db("note").where("id", id).del();
};
const createNote = async () => {
  const note = {
    id: uuid.v4(),
    title: "",
    content: "",
    created: Date.now(),
    updated: Date.now()
  };
  await db("note").insert(note);
  return note;
};
const saveNote = async (id, updates) => {
  const note = await getNote(id);
  if (!note)
    return null;
  const updatedNote = {
    ...note,
    ...updates,
    updated: Date.now()
  };
  await db("note").where("id", id).update(updatedNote);
  return updatedNote;
};
const getNote = async (id) => {
  const notes = await db("note").where("id", id);
  return notes.length ? notes[0] : null;
};
const NotesApi = {
  fetchNotes,
  updateNote,
  createNote,
  getNote,
  deleteNote,
  saveNote
};
const db = require("knex")({
  client: "sqlite3",
  // todo: change to better-sqlite3
  connection: {
    filename: "./mydb.sqlite"
  },
  useNullAsDefault: true
});
console.log("creating the tables...");
console.log("creating notes table...");
db.schema.hasTable("note").then((exists) => {
  console.log("notes table exists?", exists);
  if (!exists) {
    return db.schema.createTable("note", (table) => {
      table.string("id").primary().unique().notNullable();
      table.string("title");
      table.string("content");
      table.integer("created").notNullable().defaultTo(Date.now());
      table.integer("updated").notNullable().defaultTo(Date.now());
    }).then(() => {
      console.log("created table note");
    }).catch((err) => {
      console.log("error creating table note", err);
    });
  }
});
const api = { NotesApi };
electron.contextBridge.exposeInMainWorld("api", api);
function domReady(condition = ["complete", "interactive"]) {
  return new Promise((resolve) => {
    if (condition.includes(document.readyState)) {
      resolve(true);
    } else {
      document.addEventListener("readystatechange", () => {
        if (condition.includes(document.readyState)) {
          resolve(true);
        }
      });
    }
  });
}
const safeDOM = {
  append(parent, child) {
    if (!Array.from(parent.children).find((e) => e === child)) {
      return parent.appendChild(child);
    }
  },
  remove(parent, child) {
    if (Array.from(parent.children).find((e) => e === child)) {
      return parent.removeChild(child);
    }
  }
};
function useLoading() {
  const className = `loaders-css__square-spin`;
  const styleContent = `
@keyframes square-spin {
  25% { transform: perspective(100px) rotateX(180deg) rotateY(0); }
  50% { transform: perspective(100px) rotateX(180deg) rotateY(180deg); }
  75% { transform: perspective(100px) rotateX(0) rotateY(180deg); }
  100% { transform: perspective(100px) rotateX(0) rotateY(0); }
}
.${className} > div {
  animation-fill-mode: both;
  width: 50px;
  height: 50px;
  background: #fff;
  animation: square-spin 3s 0s cubic-bezier(0.09, 0.57, 0.49, 0.9) infinite;
}
.app-loading-wrap {
  position: fixed;
  top: 0;
  left: 0;
  width: 100vw;
  height: 100vh;
  display: flex;
  align-items: center;
  justify-content: center;
  background: #282c34;
  z-index: 9;
}
    `;
  const oStyle = document.createElement("style");
  const oDiv = document.createElement("div");
  oStyle.id = "app-loading-style";
  oStyle.innerHTML = styleContent;
  oDiv.className = "app-loading-wrap";
  oDiv.innerHTML = `<div class="${className}"><div></div></div>`;
  return {
    appendLoading() {
      safeDOM.append(document.head, oStyle);
      safeDOM.append(document.body, oDiv);
    },
    removeLoading() {
      safeDOM.remove(document.head, oStyle);
      safeDOM.remove(document.body, oDiv);
    }
  };
}
const { appendLoading, removeLoading } = useLoading();
domReady().then(appendLoading);
window.onmessage = (ev) => {
  ev.data.payload === "removeLoading" && removeLoading();
};
setTimeout(removeLoading, 4999);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
